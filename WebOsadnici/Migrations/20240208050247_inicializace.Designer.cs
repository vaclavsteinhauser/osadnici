// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebOsadnici.Data;

#nullable disable

namespace WebOsadnici.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240208050247_inicializace")]
    partial class inicializace
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AkcniKarta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Nazev")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("StavHraceId")
                        .HasColumnType("char(36)");

                    b.Property<int>("pocet")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StavHraceId");

                    b.ToTable("AkcniKarty", (string)null);
                });

            modelBuilder.Entity("Cesta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MapkaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("hracId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("natoceni")
                        .HasColumnType("int");

                    b.Property<int>("poziceX")
                        .HasColumnType("int");

                    b.Property<int>("poziceY")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapkaId");

                    b.HasIndex("hracId");

                    b.ToTable("Cesty", (string)null);
                });

            modelBuilder.Entity("Hra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("hracNaTahu")
                        .HasColumnType("int");

                    b.Property<int>("stavHry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hry", (string)null);
                });

            modelBuilder.Entity("HraHrac", b =>
                {
                    b.Property<Guid>("HraId")
                        .HasColumnType("char(36)");

                    b.Property<string>("hraciId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("HraId", "hraciId");

                    b.HasIndex("hraciId");

                    b.ToTable("HraHrac");
                });

            modelBuilder.Entity("Hrac", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Hraci", (string)null);
                });

            modelBuilder.Entity("Mapka", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("hraId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("hraId")
                        .IsUnique();

                    b.ToTable("Mapky", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Pole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("blokovane")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("cislo")
                        .HasColumnType("int");

                    b.Property<Guid?>("mapkaId")
                        .HasColumnType("char(36)");

                    b.Property<int>("poziceX")
                        .HasColumnType("int");

                    b.Property<int>("poziceY")
                        .HasColumnType("int");

                    b.Property<Guid?>("surovinaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("mapkaId");

                    b.HasIndex("surovinaId");

                    b.ToTable("Policka", (string)null);
                });

            modelBuilder.Entity("Rozcesti", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CestaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MapkaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PoleId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("blokovane")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("hracId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("poziceX")
                        .HasColumnType("int");

                    b.Property<int>("poziceY")
                        .HasColumnType("int");

                    b.Property<Guid?>("stavbaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CestaId");

                    b.HasIndex("MapkaId");

                    b.HasIndex("PoleId");

                    b.HasIndex("hracId");

                    b.HasIndex("stavbaId");

                    b.ToTable("Rozcesti", (string)null);
                });

            modelBuilder.Entity("StavHrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("barva")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("hraId")
                        .HasColumnType("char(36)");

                    b.Property<string>("hracId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("poradi")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("hraId");

                    b.HasIndex("hracId");

                    b.ToTable("StavyHracu", (string)null);
                });

            modelBuilder.Entity("Stavba", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Nazev")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("zisk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stavby", (string)null);
                });

            modelBuilder.Entity("Surovina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BackColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nazev")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Suroviny", (string)null);
                });

            modelBuilder.Entity("SurovinaKarta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("StavHraceId")
                        .HasColumnType("char(36)");

                    b.Property<int>("pocet")
                        .HasColumnType("int");

                    b.Property<Guid?>("surovinaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StavHraceId");

                    b.HasIndex("surovinaId");

                    b.ToTable("SurovinaKarty", (string)null);
                });

            modelBuilder.Entity("AkcniKarta", b =>
                {
                    b.HasOne("StavHrace", null)
                        .WithMany("AkcniKarty")
                        .HasForeignKey("StavHraceId");
                });

            modelBuilder.Entity("Cesta", b =>
                {
                    b.HasOne("Mapka", null)
                        .WithMany("cesty")
                        .HasForeignKey("MapkaId");

                    b.HasOne("Hrac", "hrac")
                        .WithMany()
                        .HasForeignKey("hracId");

                    b.Navigation("hrac");
                });

            modelBuilder.Entity("HraHrac", b =>
                {
                    b.HasOne("Hra", null)
                        .WithMany()
                        .HasForeignKey("HraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("hraciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mapka", b =>
                {
                    b.HasOne("Hra", "hra")
                        .WithOne("mapka")
                        .HasForeignKey("Mapka", "hraId");

                    b.Navigation("hra");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pole", b =>
                {
                    b.HasOne("Mapka", "mapka")
                        .WithMany("policka")
                        .HasForeignKey("mapkaId");

                    b.HasOne("Surovina", "surovina")
                        .WithMany()
                        .HasForeignKey("surovinaId");

                    b.Navigation("mapka");

                    b.Navigation("surovina");
                });

            modelBuilder.Entity("Rozcesti", b =>
                {
                    b.HasOne("Cesta", null)
                        .WithMany("konce")
                        .HasForeignKey("CestaId");

                    b.HasOne("Mapka", null)
                        .WithMany("rozcesti")
                        .HasForeignKey("MapkaId");

                    b.HasOne("Pole", null)
                        .WithMany("rozcesti")
                        .HasForeignKey("PoleId");

                    b.HasOne("Hrac", "hrac")
                        .WithMany()
                        .HasForeignKey("hracId");

                    b.HasOne("Stavba", "stavba")
                        .WithMany()
                        .HasForeignKey("stavbaId");

                    b.Navigation("hrac");

                    b.Navigation("stavba");
                });

            modelBuilder.Entity("StavHrace", b =>
                {
                    b.HasOne("Hra", "hra")
                        .WithMany("stavy")
                        .HasForeignKey("hraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hrac", "hrac")
                        .WithMany()
                        .HasForeignKey("hracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hra");

                    b.Navigation("hrac");
                });

            modelBuilder.Entity("SurovinaKarta", b =>
                {
                    b.HasOne("StavHrace", null)
                        .WithMany("SurovinaKarty")
                        .HasForeignKey("StavHraceId");

                    b.HasOne("Surovina", "surovina")
                        .WithMany()
                        .HasForeignKey("surovinaId");

                    b.Navigation("surovina");
                });

            modelBuilder.Entity("Cesta", b =>
                {
                    b.Navigation("konce");
                });

            modelBuilder.Entity("Hra", b =>
                {
                    b.Navigation("mapka");

                    b.Navigation("stavy");
                });

            modelBuilder.Entity("Mapka", b =>
                {
                    b.Navigation("cesty");

                    b.Navigation("policka");

                    b.Navigation("rozcesti");
                });

            modelBuilder.Entity("Pole", b =>
                {
                    b.Navigation("rozcesti");
                });

            modelBuilder.Entity("StavHrace", b =>
                {
                    b.Navigation("AkcniKarty");

                    b.Navigation("SurovinaKarty");
                });
#pragma warning restore 612, 618
        }
    }
}
