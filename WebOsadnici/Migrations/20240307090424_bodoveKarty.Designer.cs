// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebOsadnici.Data;

#nullable disable

namespace WebOsadnici.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240307090424_bodoveKarty")]
    partial class bodoveKarty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Proxies:ChangeTracking", true)
                .HasAnnotation("Proxies:CheckEquality", true)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CestaRozcesti", b =>
                {
                    b.Property<Guid>("CestaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("rozcestiId")
                        .HasColumnType("char(36)");

                    b.HasKey("CestaId", "rozcestiId");

                    b.HasIndex("rozcestiId");

                    b.ToTable("CestaRozcesti");
                });

            modelBuilder.Entity("Hrac", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Hraci", (string)null);
                });

            modelBuilder.Entity("MapkaStavba", b =>
                {
                    b.Property<Guid>("MapkaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StavbyId")
                        .HasColumnType("char(36)");

                    b.HasKey("MapkaId", "StavbyId");

                    b.HasIndex("StavbyId");

                    b.ToTable("MapkaStavba");
                });

            modelBuilder.Entity("MapkaSurovina", b =>
                {
                    b.Property<Guid>("MapkaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SurovinyId")
                        .HasColumnType("char(36)");

                    b.HasKey("MapkaId", "SurovinyId");

                    b.HasIndex("SurovinyId");

                    b.ToTable("MapkaSurovina");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PoleRozcesti", b =>
                {
                    b.Property<Guid>("PoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RozcestiId")
                        .HasColumnType("char(36)");

                    b.HasKey("PoleId", "RozcestiId");

                    b.HasIndex("RozcestiId");

                    b.ToTable("PoleRozcesti");
                });

            modelBuilder.Entity("SmenaSurovinaKarta", b =>
                {
                    b.Property<Guid>("SmenaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("nabidkaId")
                        .HasColumnType("char(36)");

                    b.HasKey("SmenaId", "nabidkaId");

                    b.HasIndex("nabidkaId");

                    b.ToTable("SmenaSurovinaKarta");
                });

            modelBuilder.Entity("SmenaSurovinaKarta1", b =>
                {
                    b.Property<Guid>("Smena1Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("poptavkaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Smena1Id", "poptavkaId");

                    b.HasIndex("poptavkaId");

                    b.ToTable("SmenaSurovinaKarta1");
                });

            modelBuilder.Entity("StavHraceSurovinaKarta", b =>
                {
                    b.Property<Guid>("StavHraceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SurovinaKartyId")
                        .HasColumnType("char(36)");

                    b.HasKey("StavHraceId", "SurovinaKartyId");

                    b.HasIndex("SurovinaKartyId");

                    b.ToTable("StavHraceSurovinaKarta");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.AkcniKarta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nazev")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Pocet")
                        .HasColumnType("int");

                    b.Property<Guid?>("StavHraceId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StavHraceId");

                    b.ToTable("AkcniKarty", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("AkcniKarta");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Aktivita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Akce")
                        .HasColumnType("int");

                    b.Property<int>("CisloAktivity")
                        .HasColumnType("int");

                    b.Property<Guid?>("HraId")
                        .HasColumnType("char(36)");

                    b.Property<string>("HracId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Probiha")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("HraId");

                    b.HasIndex("HracId");

                    b.ToTable("Aktivity", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Cesta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("MapkaId")
                        .HasColumnType("char(36)");

                    b.Property<string>("hracId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("natoceni")
                        .HasColumnType("int");

                    b.Property<int>("poziceX")
                        .HasColumnType("int");

                    b.Property<int>("poziceY")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapkaId");

                    b.HasIndex("hracId");

                    b.ToTable("Cesty", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Hra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("hracNaTahu")
                        .HasColumnType("int");

                    b.Property<int>("stavHry")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hry", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Mapka", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("HraId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HraId")
                        .IsUnique();

                    b.ToTable("Mapky", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Pole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Blokovane")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Cislo")
                        .HasColumnType("int");

                    b.Property<Guid?>("MapkaId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PoziceX")
                        .HasColumnType("int");

                    b.Property<int>("PoziceY")
                        .HasColumnType("int");

                    b.Property<Guid?>("SurovinaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MapkaId");

                    b.HasIndex("SurovinaId");

                    b.ToTable("Policka", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Rozcesti", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Blokovane")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HracId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("MapkaId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PoziceX")
                        .HasColumnType("int");

                    b.Property<int>("PoziceY")
                        .HasColumnType("int");

                    b.Property<Guid?>("StavbaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("HracId");

                    b.HasIndex("MapkaId");

                    b.HasIndex("StavbaId");

                    b.ToTable("Rozcesti", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Smena", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("HraId")
                        .HasColumnType("char(36)");

                    b.Property<string>("nabizejiciId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("HraId");

                    b.HasIndex("nabizejiciId");

                    b.ToTable("Smeny", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.StavHrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("barva")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("hraId")
                        .HasColumnType("char(36)");

                    b.Property<string>("hracId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("nejdelsiCesta")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("nejvetsiVojsko")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("poradi")
                        .HasColumnType("int");

                    b.Property<int>("zahranychRytiru")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("hraId");

                    b.HasIndex("hracId");

                    b.ToTable("StavyHracu", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Stavba", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Body")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nazev")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Zisk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stavby", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Surovina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BackColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nazev")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Suroviny", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.SurovinaKarta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Pocet")
                        .HasColumnType("int");

                    b.Property<Guid?>("StavbaId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SurovinaId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("StavbaId");

                    b.HasIndex("SurovinaId");

                    b.ToTable("SurovinaKarty", (string)null);
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.BodovaKarta", b =>
                {
                    b.HasBaseType("WebOsadnici.Models.HerniTridy.AkcniKarta");

                    b.Property<int>("Body")
                        .HasColumnType("int");

                    b.Property<Guid?>("StavHraceId1")
                        .HasColumnType("char(36)");

                    b.HasIndex("StavHraceId1");

                    b.HasDiscriminator().HasValue("BodovaKarta");
                });

            modelBuilder.Entity("CestaRozcesti", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Cesta", null)
                        .WithMany()
                        .HasForeignKey("CestaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOsadnici.Models.HerniTridy.Rozcesti", null)
                        .WithMany()
                        .HasForeignKey("rozcestiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapkaStavba", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Mapka", null)
                        .WithMany()
                        .HasForeignKey("MapkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOsadnici.Models.HerniTridy.Stavba", null)
                        .WithMany()
                        .HasForeignKey("StavbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MapkaSurovina", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Mapka", null)
                        .WithMany()
                        .HasForeignKey("MapkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOsadnici.Models.HerniTridy.Surovina", null)
                        .WithMany()
                        .HasForeignKey("SurovinyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hrac", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PoleRozcesti", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Pole", null)
                        .WithMany()
                        .HasForeignKey("PoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOsadnici.Models.HerniTridy.Rozcesti", null)
                        .WithMany()
                        .HasForeignKey("RozcestiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmenaSurovinaKarta", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Smena", null)
                        .WithMany()
                        .HasForeignKey("SmenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOsadnici.Models.HerniTridy.SurovinaKarta", null)
                        .WithMany()
                        .HasForeignKey("nabidkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmenaSurovinaKarta1", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Smena", null)
                        .WithMany()
                        .HasForeignKey("Smena1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOsadnici.Models.HerniTridy.SurovinaKarta", null)
                        .WithMany()
                        .HasForeignKey("poptavkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StavHraceSurovinaKarta", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.StavHrace", null)
                        .WithMany()
                        .HasForeignKey("StavHraceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebOsadnici.Models.HerniTridy.SurovinaKarta", null)
                        .WithMany()
                        .HasForeignKey("SurovinaKartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.AkcniKarta", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.StavHrace", null)
                        .WithMany("AkcniKarty")
                        .HasForeignKey("StavHraceId");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Aktivita", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Hra", null)
                        .WithMany("bufferAktivit")
                        .HasForeignKey("HraId");

                    b.HasOne("Hrac", "Hrac")
                        .WithMany()
                        .HasForeignKey("HracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hrac");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Cesta", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Mapka", null)
                        .WithMany("Cesty")
                        .HasForeignKey("MapkaId");

                    b.HasOne("Hrac", "hrac")
                        .WithMany()
                        .HasForeignKey("hracId");

                    b.Navigation("hrac");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Mapka", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Hra", "Hra")
                        .WithOne("mapka")
                        .HasForeignKey("WebOsadnici.Models.HerniTridy.Mapka", "HraId");

                    b.Navigation("Hra");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Pole", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Mapka", null)
                        .WithMany("Policka")
                        .HasForeignKey("MapkaId");

                    b.HasOne("WebOsadnici.Models.HerniTridy.Surovina", "Surovina")
                        .WithMany()
                        .HasForeignKey("SurovinaId");

                    b.Navigation("Surovina");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Rozcesti", b =>
                {
                    b.HasOne("Hrac", "Hrac")
                        .WithMany()
                        .HasForeignKey("HracId");

                    b.HasOne("WebOsadnici.Models.HerniTridy.Mapka", null)
                        .WithMany("Rozcesti")
                        .HasForeignKey("MapkaId");

                    b.HasOne("WebOsadnici.Models.HerniTridy.Stavba", "Stavba")
                        .WithMany()
                        .HasForeignKey("StavbaId");

                    b.Navigation("Hrac");

                    b.Navigation("Stavba");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Smena", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Hra", null)
                        .WithMany("aktivniSmeny")
                        .HasForeignKey("HraId");

                    b.HasOne("Hrac", "nabizejici")
                        .WithMany()
                        .HasForeignKey("nabizejiciId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("nabizejici");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.StavHrace", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Hra", "hra")
                        .WithMany("stavy")
                        .HasForeignKey("hraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hrac", "hrac")
                        .WithMany()
                        .HasForeignKey("hracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hra");

                    b.Navigation("hrac");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.SurovinaKarta", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.Stavba", null)
                        .WithMany("Cena")
                        .HasForeignKey("StavbaId");

                    b.HasOne("WebOsadnici.Models.HerniTridy.Surovina", "Surovina")
                        .WithMany()
                        .HasForeignKey("SurovinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Surovina");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.BodovaKarta", b =>
                {
                    b.HasOne("WebOsadnici.Models.HerniTridy.StavHrace", null)
                        .WithMany("BodoveKarty")
                        .HasForeignKey("StavHraceId1");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Hra", b =>
                {
                    b.Navigation("aktivniSmeny");

                    b.Navigation("bufferAktivit");

                    b.Navigation("mapka");

                    b.Navigation("stavy");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Mapka", b =>
                {
                    b.Navigation("Cesty");

                    b.Navigation("Policka");

                    b.Navigation("Rozcesti");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.StavHrace", b =>
                {
                    b.Navigation("AkcniKarty");

                    b.Navigation("BodoveKarty");
                });

            modelBuilder.Entity("WebOsadnici.Models.HerniTridy.Stavba", b =>
                {
                    b.Navigation("Cena");
                });
#pragma warning restore 612, 618
        }
    }
}
